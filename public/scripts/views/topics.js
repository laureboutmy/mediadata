// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', '../views/topic', '../models/topic', '../collections/topics'], function($, _, Backbone, TopicView, TopicModel, TopicsCollection) {
    'use strict';
    var TopicsView;
    return TopicsView = (function(_super) {
      __extends(TopicsView, _super);

      function TopicsView() {
        return TopicsView.__super__.constructor.apply(this, arguments);
      }

      TopicsView.prototype.tagName = 'ul';

      TopicsView.prototype.className = 'autocomplete';

      TopicsView.prototype.wait = 300;

      TopicsView.prototype.queryParameter = 'query';

      TopicsView.prototype.minKeywordLength = 2;

      TopicsView.prototype.currentText = '';

      TopicsView.prototype.itemView = TopicView;

      TopicsView.prototype.initialize = function(options) {
        console.log(options);
        _.extend(this, options);
        return this.filter = _.debounce(this.filter, this.wait);
      };

      TopicsView.prototype.render = function() {
        console.log('jee');
        this.input.attr('autocomplete', 'off');
        this.$el.width(this.input.outerWidth());
        this.input.keyup(_.bind(this.keyup, this)).keydown(_.bind(this.keydown, this)).after(this.$el);
        return this;
      };

      TopicsView.prototype.keydown = function(event) {
        console.log('ehehe');
        if (event.keyCode === 38) {
          this.move(-1);
        }
        if (event.keyCode === 40) {
          this.move(+1);
        }
        if (event.keyCode === 13) {
          this.onEnter();
        }
        if (event.keyCode === 27) {
          return this.hide();
        }
      };

      TopicsView.prototype.keyup = function() {
        var keyword;
        console.log('ehehererere');
        keyword = this.input.val();
        if (this.isChanged(keyword)) {
          if (this.isValid(keyword)) {
            return this.filter(keyword);
          } else {
            return this.hide();
          }
        }
      };

      TopicsView.prototype.filter = function(keyword) {
        var params;
        keyword = keyword.toLowerCase();
        if (this.model.url) {
          params = {};
          params[this.queryParameter] = keyword;
          return this.model.fetch({
            success: (function() {
              return this.loadResult(this.model.models, keyword);
            }).bind(this),
            data: params
          });
        } else {
          return this.loadResult(this.model.filter(function(model) {
            return model.label().toLowerCase().indexOf(keyword) !== -1;
          }), keyword);
        }
      };

      TopicsView.prototype.isValid = function(keyword) {
        return keyword.length > this.minKeywordLength;
      };

      TopicsView.prototype.isChanged = function(keyword) {
        return this.currentText !== keyword;
      };

      TopicsView.prototype.move = function(position) {
        var current, index, siblings;
        current = this.$el.children('active');
        siblings = this.$el.children();
        index = current.index() + position;
        if (siblings.eq(index).length) {
          current.removeClass('active');
          siblings.eq(index).addClass('active');
        }
        return false;
      };

      TopicsView.prototype.onEnter = function() {
        this.$el.children('.active').click();
        return false;
      };

      TopicsView.prototype.loadResult = function(model, keyword) {
        this.currentText = keyword;
        this.show().reset();
        if (model.length) {
          _.forEach(model, this.addItem, this);
          return this.show();
        } else {
          return this.hide();
        }
      };

      TopicsView.prototype.addItem = function(model) {
        return this.$el.append(new this.itemView({
          model: model,
          parent: this
        }).render().$el);
      };

      TopicsView.prototype.select = function(model) {
        var label;
        label = model.label();
        this.input.val(label);
        this.currentText = label;
        return this.onSelect(model);
      };

      TopicsView.prototype.reset = function() {
        this.$el.empty();
        return this;
      };

      TopicsView.prototype.hide = function() {
        this.$el.hide();
        return this;
      };

      TopicsView.prototype.show = function() {
        this.$el.show();
        return this;
      };

      TopicsView.prototype.onSelect = function() {
        return console.log('yo');
      };

      return TopicsView;

    })(Backbone.View);
  });

}).call(this);
