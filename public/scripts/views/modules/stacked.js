// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'd3', 'text!templates/modules/stacked.html'], function($, _, Backbone, d3, tplStacked) {
    'use strict';
    var StackedView;
    return StackedView = (function(_super) {
      var height, margin, marginRect, stacked_data, width, x, y, yAxis;

      __extends(StackedView, _super);

      function StackedView() {
        return StackedView.__super__.constructor.apply(this, arguments);
      }

      StackedView.prototype.el = '.module.stacked';

      StackedView.prototype.template = _.template(tplStacked);

      margin = {
        top: 60,
        right: 20,
        bottom: 60,
        left: 40
      };

      width = 1018;

      height = 355;

      marginRect = 25;

      stacked_data = void 0;

      x = d3.scale.ordinal().rangeRoundBands([0, width]);

      y = d3.scale.linear().range([0, height]);

      StackedView.prototype.svg = function() {
        return d3.selectAll(this.$el).append('svg').attr('id', 'stackedchart').attr('width', width).attr('height', height + margin.top + margin.bottom);
      };

      yAxis = d3.svg.axis().scale(y).orient('left').ticks(4).tickSize(-width, 0, 0);

      StackedView.prototype.getScale = function(data) {
        var d, i, _i, _len, _ref;
        _ref = data.channelDatas;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          d = _ref[i];
          d.person1 = +d.person1;
          d.person2 = +d.person2;
        }
        stacked_data = d3.layout.stack()(data.channelMap.map(function(data_nd) {
          return data.channelDatas.map(function(d) {
            return {
              x: d.channelName,
              y: +d[data_nd]
            };
          });
        }));
        x.domain(stacked_data[0].map(function(d) {
          return d.x;
        }));
        return y.domain([
          0, d3.max(stacked_data[stacked_data.length - 1], function(d) {
            return d.y0 + d.y;
          })
        ]);
      };

      StackedView.prototype.getTotals = function(data) {};

      StackedView.prototype.drawContent = function(data) {
        d3.select('#stackedchart').append('g').attr('class', 'grid').attr("transform", "translate(0,99)").call(yAxis);
        d3.select('#stackedchart').selectAll('g.stacked-g').data(stacked_data).enter().append('g').attr('class', function(d, i) {
          return 'stacked-g person' + (i + 1) + " " + data.channelMap[i];
        }).attr('transform', 'translate(0,' + (height + margin.bottom) + ')');
        d3.select('#stacked').selectAll('g.stacked-g').selectAll('g').data(Object).enter().append('g').append('rect').attr('x', function(d) {
          return x(d.x) + 33;
        }).attr('y', function(d) {
          return -y(d.y0) - y(d.y);
        }).attr('height', function(d) {
          return y(d.y);
        }).attr('width', 35);
        return d3.select('#stackedchart').select('g.person1').selectAll('image').data(data.channelDatas).enter().append('image').attr('xlink:href', function(d) {
          return d.channelPicture;
        }).data(Object).attr('height', 80).attr('width', 70).attr('x', function(d) {
          return x(d.x) + 15;
        }).attr('y', -5);
      };

      StackedView.prototype.drawTooltip = function(data) {
        var i, total_height;
        total_height = [];
        i = 0;
        while (i < stacked_data[0].length) {
          total_height[i] = y(stacked_data[0][i].y) + y(stacked_data[1][i].y);
          ++i;
        }
        d3.select('#stacked').append('filter').attr('id', 'f1').attr('width', '150%').attr('height', '150%').append('feOffset').attr('result', 'offOut').attr('in', 'SourceAlpha').attr('dx', 0).attr('dy', 3);
        d3.select('#stacked').select('filter').append('feGaussianBlur').attr('stdDeviation', 1).attr('result', 'blur');
        d3.select('#stacked').selectAll('g.stacked-g g').append('rect').attr('filter', 'url(#f1)').attr('class', 'tooltip shadow').attr('height', 45).attr('width', 100).attr('x', function(d) {
          return x(d.x);
        }).attr('y', function(d, i) {
          return -y(d.y0) - (typeof total_height[i] === 'undefined' ? y(d.y) : total_height[i]) - 53;
        }).attr('rx', 20).attr('ry', 25);
        d3.select('#stacked').selectAll('g.stacked-g g').append('rect').attr('class', 'tooltip').attr('height', 45).attr('width', 100).attr('x', function(d) {
          return x(d.x);
        }).attr('y', function(d, i) {
          return -y(d.y0) - (typeof total_height[i] === 'undefined' ? y(d.y) : total_height[i]) - 55;
        }).attr('rx', 20).attr('ry', 25);
        d3.select('#stacked').selectAll('g.stacked-g g').append('text').attr('text-anchor', 'middle').attr('class', 'tooltip name').attr('x', function(d) {
          return x(d.x) + 47;
        }).attr('y', function(d, i) {
          return -y(d.y0) - (typeof total_height[i] === 'undefined' ? y(d.y) : total_height[i]) - 33;
        }).text(function(d) {
          return d.x;
        });
        return d3.select('#stacked').selectAll('g.stacked-g g').append('text').attr('text-anchor', 'middle').attr('class', 'tooltip count').attr('x', function(d) {
          return x(d.x) + 47;
        }).attr('y', function(d, i) {
          return -y(d.y0) - (typeof total_height[i] === 'undefined' ? y(d.y) : total_height[i]) - 18;
        }).text(function(d) {
          return d.y;
        });
      };

      StackedView.prototype.render = function(data) {
        this.$el.html(this.template());
        this.svg();
        this.getScale(data);
        this.drawContent(data);
        this.drawTooltip(data);
        return this.getTotals(data);
      };

      return StackedView;

    })(Backbone.View);
  });

}).call(this);
