// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'd3'], function($, _, Backbone, d3) {
    'use strict';
    var ClockView;
    return ClockView = (function(_super) {
      __extends(ClockView, _super);

      function ClockView() {
        return ClockView.__super__.constructor.apply(this, arguments);
      }

      ClockView.prototype.el = '.module.clock';

      ClockView.prototype.initialize = function() {};

      ClockView.prototype.render = function(data) {

        /* Var / Functions */
        var arc, arcOptions, clock, days, daysFR, draw, fh, fw, i, maxHourValue, mentionsByDay, mentionsByHour, mouseOut, overallMaxHourValue, radiusScale, svg, th, tw, visHeight, visWidth, _i, _j;
        days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
        daysFR = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
        mentionsByDay = [];
        for (i = _i = 1; _i <= 7; i = ++_i) {
          mentionsByDay.push({
            mentions: 0
          });
        }
        mentionsByHour = [];
        for (i = _j = 1; _j <= 24; i = ++_j) {
          mentionsByHour.push({
            mentions: 0,
            outerRadius: 0
          });
        }
        tw = 215;
        th = 50;
        fw = 125;
        fh = 40;
        visWidth = 180;
        visHeight = 350;
        maxHourValue = [0];
        overallMaxHourValue = [0];
        radiusScale = d3.scale.linear().domain([0, 20]).range([100, visWidth - 40]).clamp(false);
        arcOptions = {
          width: 7.1,
          from: 50,
          to: function(d) {
            return d.outerRadius;
          }
        };
        arc = function(d, o) {
          return d3.svg.arc().startAngle(function(d) {
            if (d.mentions > 0) {
              return (d.hour * 15 - o.width) * Math.PI / 180;
            } else {
              return 0;
            }
          }).endAngle(function(d) {
            if (d.mentions > 0) {
              return (d.hour * 15 + o.width) * Math.PI / 180;
            } else {
              return 0;
            }
          }).innerRadius(o.from).outerRadius(function(d) {
            if (d.mentions > 0) {
              return o.to(d);
            } else {
              return 0;
            }
          });
        };
        mouseOut = function() {
          return clock.selectAll('path.person' + data.personNumber).on('mouseout', function(d) {
            d3.select('.center .time.person' + data.personNumber).text(maxHourValue[1] + ' heures');
            return d3.select('.center .value.person' + data.personNumber).text(maxHourValue[0]);
          });
        };
        d3.selectAll(this.$el).append('svg').attr('id', 'maintext' + data.personNumber).attr('width', tw).attr('height', th);
        svg = d3.selectAll(this.$el).append('svg').attr('id', 'filter' + data.personNumber).attr('width', fw).attr('height', fh);
        d3.selectAll(this.$el).append('svg').attr('id', 'clockchart').attr('height', visHeight).append('g').attr('class', 'theclock' + data.personNumber);
        clock = d3.select('g.theclock' + data.personNumber);

        /* Draw the chart */
        draw = function() {
          var appendMainText, d, drawClock, drawContent, drawFilter, redrawContent, _k, _len, _ref;
          _ref = data.broadcastHoursByDay;
          for (i = _k = 0, _len = _ref.length; _k < _len; i = ++_k) {
            d = _ref[i];
            d.broadcastHour = +d.broadcastHour;
            d.broadcastCount = +d.broadcastCount;
          }
          appendMainText = function() {
            d3.select('#maintext' + data.personNumber).append('svg:text').attr('class', 'value person' + data.personNumber).attr('x', '0').attr('y', '16').text(mentionsByDay[0].mentions);
            return d3.select('#maintext' + data.personNumber).append('svg:text').attr('class', 'time person' + data.personNumber).attr('x', '0').attr('y', '40').text('Mentions horaires le ' + daysFR[0]);
          };
          drawFilter = function() {
            var d2, filterClick, i2, maxDayValue, xScale, yScale, _l, _len1, _len2, _len3, _len4, _m, _n, _o, _ref1, _results;
            _ref1 = data.broadcastHoursByDay;
            for (i = _l = 0, _len1 = _ref1.length; _l < _len1; i = ++_l) {
              d = _ref1[i];
              for (i2 = _m = 0, _len2 = days.length; _m < _len2; i2 = ++_m) {
                d2 = days[i2];
                if (d.broadcastWeekday === days[i2]) {
                  mentionsByDay[i2].mentions += d.broadcastCount;
                  mentionsByDay[i2].day = d2;
                }
              }
            }
            maxDayValue = 0;
            for (i = _n = 0, _len3 = mentionsByDay.length; _n < _len3; i = ++_n) {
              d = mentionsByDay[i];
              if (maxDayValue < d.mentions) {
                maxDayValue = d.mentions;
              }
            }
            xScale = d3.scale.ordinal().domain(d3.range(7)).rangeRoundBands([0, fw], 0.3);
            yScale = d3.scale.linear().domain([
              0, maxDayValue, function(d) {
                return d;
              }
            ]).range([0, fh]);
            svg.selectAll('rect').data(mentionsByDay).enter().append('rect').attr('x', function(d, i) {
              return xScale(i);
            }).attr('y', function(d) {
              return fh - yScale(d.mentions);
            }).attr('width', xScale.rangeBand()).attr('height', function(d) {
              return yScale(d.mentions);
            }).attr('class', 'bar' + data.personNumber).attr('id', function(d) {
              return d.day + data.personNumber;
            });
            svg.select('#filter' + data.personNumber + ' #Monday' + data.personNumber).classed('selected', true);
            filterClick = function(i, day) {
              return document.getElementById(days[i] + data.personNumber).onclick = function(d) {
                redrawContent(day);
                d3.selectAll('.bar' + data.personNumber).classed('selected', false);
                return d3.select(this).classed('selected', true);
              };
            };
            _results = [];
            for (i = _o = 0, _len4 = days.length; _o < _len4; i = ++_o) {
              d = days[i];
              _results.push(filterClick(i, days[i]));
            }
            return _results;
          };
          redrawContent = function(day) {
            var currentDay, pathScale, _l, _len1, _len2, _len3, _m, _n, _ref1, _ref2;
            currentDay = days.indexOf(day);
            for (i = _l = 0, _len1 = mentionsByHour.length; _l < _len1; i = ++_l) {
              d = mentionsByHour[i];
              d.mentions = 0;
              d.outerRadius = 0;
            }
            maxHourValue[0] = 0;
            _ref1 = data.broadcastHoursByDay;
            for (i = _m = 0, _len2 = _ref1.length; _m < _len2; i = ++_m) {
              d = _ref1[i];
              if (d.broadcastWeekday === day) {
                if (d.broadcastCount > maxHourValue[0]) {
                  maxHourValue[0] = d.broadcastCount;
                  maxHourValue[1] = d.broadcastHour;
                }
              }
            }
            pathScale = d3.scale.linear().domain([0, overallMaxHourValue[0] + 20]).range([80, visWidth - 40]).clamp(true);
            _ref2 = data.broadcastHoursByDay;
            for (i = _n = 0, _len3 = _ref2.length; _n < _len3; i = ++_n) {
              d = _ref2[i];
              if (d.broadcastWeekday === day) {
                console.log('New maxHourValue: ', maxHourValue[0]);
                mentionsByHour[d.broadcastHour].mentions += d.broadcastCount;
                mentionsByHour[d.broadcastHour].outerRadius = pathScale(mentionsByHour[d.broadcastHour].mentions);
              }
            }
            d3.select('#maintext' + data.personNumber + ' .value.person' + data.personNumber).text(mentionsByDay[currentDay].mentions);
            d3.select('#maintext' + data.personNumber + ' .time.person' + data.personNumber).text('Mentions horaires le ' + daysFR[currentDay]);
            clock.select('g.arcs' + data.personNumber).selectAll('path').data(mentionsByHour).transition().duration(500).attr('d', arc(mentionsByHour, arcOptions));
            clock.select('g.center').select('text.time').data(mentionsByHour).text(maxHourValue[1] + ' heures');
            return clock.select('g.center').select('text.value').data(mentionsByHour).text(maxHourValue[0]);
          };
          drawContent = function() {
            var center, pathScale, _l, _len1, _len2, _len3, _len4, _len5, _m, _n, _o, _p, _ref1, _ref2, _ref3, _ref4;
            _ref1 = data.broadcastHoursByDay;
            for (i = _l = 0, _len1 = _ref1.length; _l < _len1; i = ++_l) {
              d = _ref1[i];
              mentionsByHour[d.broadcastHour].hour = d.broadcastHour;
            }
            for (i = _m = 0, _len2 = mentionsByHour.length; _m < _len2; i = ++_m) {
              d = mentionsByHour[i];
              if (!d.hour) {
                d.hour = i;
              }
            }
            _ref2 = data.broadcastHoursByDay;
            for (i = _n = 0, _len3 = _ref2.length; _n < _len3; i = ++_n) {
              d = _ref2[i];
              if (d.broadcastCount > overallMaxHourValue[0]) {
                overallMaxHourValue[0] = d.broadcastCount;
                overallMaxHourValue[1] = d.broadcastHour;
              }
            }
            pathScale = d3.scale.linear().domain([0, overallMaxHourValue[0] + 20]).range([80, visWidth - 40]).clamp(true);
            _ref3 = data.broadcastHoursByDay;
            for (i = _o = 0, _len4 = _ref3.length; _o < _len4; i = ++_o) {
              d = _ref3[i];
              if (d.broadcastWeekday === 'Monday') {
                mentionsByHour[d.broadcastHour].mentions += d.broadcastCount;
                mentionsByHour[d.broadcastHour].outerRadius = pathScale(mentionsByHour[d.broadcastHour].mentions);
              }
            }
            _ref4 = data.broadcastHoursByDay;
            for (i = _p = 0, _len5 = _ref4.length; _p < _len5; i = ++_p) {
              d = _ref4[i];
              if (d.broadcastWeekday === 'Monday') {
                if (d.broadcastCount > maxHourValue[0]) {
                  maxHourValue[0] = d.broadcastCount;
                  maxHourValue[1] = d.broadcastHour;
                }
              }
            }
            clock.append('svg:g').attr('class', 'arcs' + data.personNumber).selectAll('path').data(mentionsByHour).enter().append('svg:path').attr('class', 'person' + data.personNumber).attr('d', arc(mentionsByHour, arcOptions)).attr('transform', 'translate(' + visWidth + ',' + visWidth + ')').on('mouseover', function(d) {
              d3.select('.center .time.person' + data.personNumber).text(d.hour + ' heures');
              return d3.select('.center .value.person' + data.personNumber).text(d.mentions);
            }).on('mouseout', mouseOut);
            center = clock.append('svg:g').attr('class', 'center');
            center.append('svg:text').attr('transform', 'translate(' + visWidth + ',' + visWidth + ')').attr('class', 'time person' + data.personNumber).text(maxHourValue[1] + ' heures');
            return center.append('svg:text').attr('transform', 'translate(' + visWidth + ',' + (visWidth + 20) + ')').attr('class', 'value person' + data.personNumber).text(maxHourValue[0]);
          };
          drawClock = function(d) {
            var h, labels, p, r, radiusFunction, ticks, w;
            w = 360;
            h = 360;
            r = Math.min(w, h) / 2;
            p = 24;
            labels = ['00:00', '06:00', '12:00', '18:00'];
            ticks = d3.range(20, 20.1);
            radiusFunction = radiusScale;
            clock.append('svg:g').attr('class', 'circle').selectAll('circle').data(ticks).enter().append('svg:circle').attr('cx', r).attr('cy', r).attr('r', radiusScale);
            clock.append('svg:g').attr('class', 'labels').selectAll('text').data(d3.range(0, 360, 90)).enter().append('svg:text').attr('transform', function(d) {
              return 'translate(' + r + ',' + p + ') rotate(' + d + ',0,' + (r - p) + ')';
            }).text(function(d) {
              return d / 15 + ':00';
            });
            return drawContent();
          };
          drawFilter();
          drawClock(mentionsByHour);
          return appendMainText();
        };

        /* Init */
        draw();
        return this;
      };

      return ClockView;

    })(Backbone.View);
  });

}).call(this);
