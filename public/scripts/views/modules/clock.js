// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'd3'], function($, _, Backbone, d3) {
    'use strict';
    var ClockView;
    return ClockView = (function(_super) {
      var arc, arcOptions, days, daysFR, fh, fw, radiusScale, visHeight, visWidth;

      __extends(ClockView, _super);

      function ClockView() {
        return ClockView.__super__.constructor.apply(this, arguments);
      }

      ClockView.prototype.el = '.module.clock';

      ClockView.prototype.defaults = {
        mlw: 215,
        mlh: 50
      };

      days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];

      daysFR = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];

      fw = 125;

      fh = 40;

      visWidth = 180;

      visHeight = 350;

      radiusScale = d3.scale.linear().domain([0, 20]).range([100, visWidth - 40]).clamp(false);

      arcOptions = {
        width: 7.1,
        from: 50,
        to: function(d) {
          return d.outerRadius;
        }
      };

      arc = function(d, o) {
        return d3.svg.arc().startAngle(function(d) {
          if (d.mentions > 0) {
            return (d.hour * 15 - o.width) * Math.PI / 180;
          } else {
            return 0;
          }
        }).endAngle(function(d) {
          if (d.mentions > 0) {
            return (d.hour * 15 + o.width) * Math.PI / 180;
          } else {
            return 0;
          }
        }).innerRadius(o.from).outerRadius(function(d) {
          if (d.mentions > 0) {
            return o.to(d);
          } else {
            return 0;
          }
        });
      };

      ClockView.prototype.mouseOut = function(maxHourValue) {
        return d3.selectAll(this.$el).selectAll('path').on('mouseout', function(d) {
          d3.select(this.parentNode.parentNode).select('.center .time').text(maxHourValue[1] + ' heures');
          return d3.select(this.parentNode.parentNode).select('.center .value').text(maxHourValue[0]);
        });
      };

      ClockView.prototype.svg = function() {
        d3.selectAll(this.$el).append('svg').attr('id', 'mainlabel').attr('width', this.defaults.mlw).attr('height', this.defaults.mlh);
        d3.selectAll(this.$el).append('svg').attr('id', 'filter').attr('width', fw).attr('height', fh);
        return d3.selectAll(this.$el).append('svg').attr('id', 'clockchart').attr('height', visHeight).append('g');
      };

      ClockView.prototype.parse = function(data) {
        var d, i, _i, _len, _ref, _results;
        _ref = data.broadcastHoursByDay;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          d = _ref[i];
          d.broadcastHour = +d.broadcastHour;
          _results.push(d.broadcastCount = +d.broadcastCount);
        }
        return _results;
      };

      ClockView.prototype.appendMainLabel = function(data) {
        var d, d2, i, i2, mentionsByDay, _i, _j, _k, _len, _len1, _ref;
        mentionsByDay = [];
        for (i = _i = 1; _i <= 7; i = ++_i) {
          mentionsByDay.push({
            mentions: 0
          });
        }
        _ref = data.broadcastHoursByDay;
        for (i = _j = 0, _len = _ref.length; _j < _len; i = ++_j) {
          d = _ref[i];
          for (i2 = _k = 0, _len1 = days.length; _k < _len1; i2 = ++_k) {
            d2 = days[i2];
            if (d.broadcastWeekday === days[i2]) {
              mentionsByDay[i2].mentions += d.broadcastCount;
              mentionsByDay[i2].day = d2;
            }
          }
        }
        d3.selectAll(this.$el).select('#mainlabel').append('svg:text').attr('class', 'value').attr('x', '0').attr('y', '16').text(mentionsByDay[0].mentions);
        return d3.selectAll(this.$el).select('#mainlabel').append('svg:text').attr('class', 'time').attr('x', '0').attr('y', '40').text('Mentions horaires le ' + daysFR[0]);
      };

      ClockView.prototype.drawFilter = function(data) {
        var d, d2, i, i2, maxDayValue, mentionsByDay, xScale, yScale, _i, _j, _k, _l, _len, _len1, _len2, _ref, _this;
        mentionsByDay = [];
        for (i = _i = 1; _i <= 7; i = ++_i) {
          mentionsByDay.push({
            mentions: 0
          });
        }
        _ref = data.broadcastHoursByDay;
        for (i = _j = 0, _len = _ref.length; _j < _len; i = ++_j) {
          d = _ref[i];
          for (i2 = _k = 0, _len1 = days.length; _k < _len1; i2 = ++_k) {
            d2 = days[i2];
            if (d.broadcastWeekday === days[i2]) {
              mentionsByDay[i2].mentions += d.broadcastCount;
              mentionsByDay[i2].day = d2;
            }
          }
        }
        maxDayValue = 0;
        for (i = _l = 0, _len2 = mentionsByDay.length; _l < _len2; i = ++_l) {
          d = mentionsByDay[i];
          if (maxDayValue < d.mentions) {
            maxDayValue = d.mentions;
          }
        }
        xScale = d3.scale.ordinal().domain(d3.range(7)).rangeRoundBands([0, fw], 0.3);
        yScale = d3.scale.linear().domain([
          0, maxDayValue, function(d) {
            return d;
          }
        ]).range([0, fh]);
        _this = this;
        d3.selectAll(this.$el).selectAll('#filter').selectAll('rect').data(mentionsByDay).enter().append('rect').attr('x', function(d, i) {
          return xScale(i);
        }).attr('y', function(d) {
          return fh - yScale(d.mentions);
        }).attr('width', xScale.rangeBand()).attr('height', function(d) {
          return yScale(d.mentions);
        }).attr('class', 'bar').attr('name', function(d) {
          return d.day;
        }).on('click', function(d) {
          _this.redrawContent(d.day, data, mentionsByDay);
          d3.select(this.parentNode).selectAll('.bar').classed('selected', false);
          return d3.select(this).classed('selected', true);
        });
        return d3.selectAll(this.$el).select('[name=Monday]').classed('selected', true);
      };

      ClockView.prototype.redrawContent = function(day, data, mentionsByDay) {
        var currentDay, d, i, maxHourValue, mentionsByHour, overallMaxHourValue, pathScale, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref, _ref1, _ref2, _ref3;
        mentionsByHour = [];
        for (i = _i = 1; _i <= 24; i = ++_i) {
          mentionsByHour.push({
            mentions: 0,
            outerRadius: 0
          });
        }
        maxHourValue = [0];
        overallMaxHourValue = [0];
        currentDay = days.indexOf(day);
        _ref = data.broadcastHoursByDay;
        for (i = _j = 0, _len = _ref.length; _j < _len; i = ++_j) {
          d = _ref[i];
          if (d.broadcastWeekday === day) {
            if (d.broadcastCount > maxHourValue[0]) {
              maxHourValue[0] = d.broadcastCount;
              maxHourValue[1] = d.broadcastHour;
            }
          }
        }
        this.mouseOut(maxHourValue);
        _ref1 = data.broadcastHoursByDay;
        for (i = _k = 0, _len1 = _ref1.length; _k < _len1; i = ++_k) {
          d = _ref1[i];
          if (d.broadcastCount > overallMaxHourValue[0]) {
            overallMaxHourValue[0] = d.broadcastCount;
            overallMaxHourValue[1] = d.broadcastHour;
          }
        }
        pathScale = d3.scale.linear().domain([0, overallMaxHourValue[0] + 20]).range([80, visWidth - 40]).clamp(true);
        _ref2 = data.broadcastHoursByDay;
        for (i = _l = 0, _len2 = _ref2.length; _l < _len2; i = ++_l) {
          d = _ref2[i];
          mentionsByHour[d.broadcastHour].hour = d.broadcastHour;
        }
        for (i = _m = 0, _len3 = mentionsByHour.length; _m < _len3; i = ++_m) {
          d = mentionsByHour[i];
          if (!d.hour) {
            d.hour = i;
          }
        }
        _ref3 = data.broadcastHoursByDay;
        for (i = _n = 0, _len4 = _ref3.length; _n < _len4; i = ++_n) {
          d = _ref3[i];
          if (d.broadcastWeekday === day) {
            mentionsByHour[d.broadcastHour].mentions += d.broadcastCount;
            mentionsByHour[d.broadcastHour].outerRadius = pathScale(mentionsByHour[d.broadcastHour].mentions);
          }
        }
        d3.selectAll(this.$el).select('#mainlabel .value').text(mentionsByDay[currentDay].mentions);
        d3.selectAll(this.$el).select('#mainlabel .person').text('Mentions horaires le ' + daysFR[currentDay]);
        d3.selectAll(this.$el).selectAll('path').data(mentionsByHour).transition().duration(500).attr('d', arc(mentionsByHour, arcOptions));
        d3.selectAll(this.$el).select('g.center text.time').data(mentionsByHour).text(maxHourValue[1] + ' heures');
        return d3.selectAll(this.$el).select('g.center text.value').data(mentionsByHour).text(maxHourValue[0]);
      };

      ClockView.prototype.drawClock = function(d, data) {
        var h, labels, p, r, radiusFunction, ticks, w;
        w = 360;
        h = 360;
        r = Math.min(w, h) / 2;
        p = 24;
        labels = ['00:00', '06:00', '12:00', '18:00'];
        ticks = d3.range(20, 20.1);
        radiusFunction = radiusScale;
        d3.selectAll(this.$el).select('g').append('svg:g').attr('class', 'circle').selectAll('circle').data(ticks).enter().append('svg:circle').attr('cx', r).attr('cy', r).attr('r', radiusScale);
        return d3.selectAll(this.$el).select('g').append('svg:g').attr('class', 'labels').selectAll('text').data(d3.range(0, 360, 90)).enter().append('svg:text').attr('transform', function(d) {
          return 'translate(' + r + ',' + p + ') rotate(' + d + ',0,' + (r - p) + ')';
        }).text((function(d) {
          return d / 15 + ':00';
        }));
      };

      ClockView.prototype.drawContent = function(data) {
        var d, i, maxHourValue, mentionsByHour, overallMaxHourValue, pathScale, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref, _ref1, _ref2, _ref3, _this;
        maxHourValue = [0];
        overallMaxHourValue = [0];
        mentionsByHour = [];
        for (i = _i = 1; _i <= 24; i = ++_i) {
          mentionsByHour.push({
            mentions: 0,
            outerRadius: 0
          });
        }
        _ref = data.broadcastHoursByDay;
        for (i = _j = 0, _len = _ref.length; _j < _len; i = ++_j) {
          d = _ref[i];
          mentionsByHour[d.broadcastHour].hour = d.broadcastHour;
        }
        for (i = _k = 0, _len1 = mentionsByHour.length; _k < _len1; i = ++_k) {
          d = mentionsByHour[i];
          if (!d.hour) {
            d.hour = i;
          }
        }
        _ref1 = data.broadcastHoursByDay;
        for (i = _l = 0, _len2 = _ref1.length; _l < _len2; i = ++_l) {
          d = _ref1[i];
          if (d.broadcastCount > overallMaxHourValue[0]) {
            overallMaxHourValue[0] = d.broadcastCount;
            overallMaxHourValue[1] = d.broadcastHour;
          }
        }
        pathScale = d3.scale.linear().domain([0, overallMaxHourValue[0] + 20]).range([80, visWidth - 40]).clamp(true);
        _ref2 = data.broadcastHoursByDay;
        for (i = _m = 0, _len3 = _ref2.length; _m < _len3; i = ++_m) {
          d = _ref2[i];
          if (d.broadcastWeekday === 'Monday') {
            mentionsByHour[d.broadcastHour].mentions += d.broadcastCount;
            mentionsByHour[d.broadcastHour].outerRadius = pathScale(mentionsByHour[d.broadcastHour].mentions);
          }
        }
        _ref3 = data.broadcastHoursByDay;
        for (i = _n = 0, _len4 = _ref3.length; _n < _len4; i = ++_n) {
          d = _ref3[i];
          if (d.broadcastWeekday === 'Monday') {
            if (d.broadcastCount > maxHourValue[0]) {
              maxHourValue[0] = d.broadcastCount;
              maxHourValue[1] = d.broadcastHour;
            }
          }
        }
        _this = this;
        d3.selectAll(this.$el).select('g').append('svg:g').attr('class', 'arcs').selectAll('path').data(mentionsByHour).enter().append('svg:path').attr('d', arc(mentionsByHour, arcOptions)).attr('transform', 'translate(' + visWidth + ',' + visWidth + ')').on('mouseover', function(d) {
          d3.select(this.parentNode.parentNode).select('.center .time').text(d.hour + ' heures');
          return d3.select(this.parentNode.parentNode).select('.center .value').text(d.mentions);
        }).on('mouseout', function(d) {
          return _this.mouseOut(maxHourValue);
        });
        d3.selectAll(this.$el).select('g').append('svg:g').attr('class', 'center');
        d3.selectAll(this.$el).select('g.center').append('svg:text').attr('transform', 'translate(' + visWidth + ',' + visWidth + ')').attr('class', 'time').text(maxHourValue[1] + ' heures');
        return d3.selectAll(this.$el).select('g.center').append('svg:text').attr('transform', 'translate(' + visWidth + ',' + (visWidth + 20) + ')').attr('class', 'value').text(maxHourValue[0]);
      };

      ClockView.prototype.clear = function() {
        return this.$el.children().remove();
      };

      ClockView.prototype.render = function(data) {
        if (this.$el.children().length > 0) {
          this.clear();
        }
        this.parse(data);
        this.svg();
        this.drawFilter(data);
        this.drawClock(data);
        this.drawContent(data);
        return this.appendMainLabel(data);
      };

      return ClockView;

    })(Backbone.View);
  });

}).call(this);
