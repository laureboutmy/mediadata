// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'mediadata', '../collections/persons', '../models/person', '../views/home', '../views/person', '../views/comparison'], function($, _, Backbone, md, PersonsCollection, PersonModel, HomeView, PersonView, ComparisonView) {
    'use strict';
    var Router;
    return Router = (function(_super) {
      __extends(Router, _super);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.routes = {
        '': 'home',
        ':person': 'getPerson',
        ':person/:otherPerson': 'getComparison'
      };

      Router.prototype.initialize = function() {
        return this.onResize();
      };

      Router.prototype.compare = function(person, otherPerson) {
        return console.log(person, otherPerson);
      };

      Router.prototype.home = function() {
        md.Views['home'] = new HomeView();
        return md.Views['home'].render();
      };

      Router.prototype.getSearchbar = function(name1, name2) {
        if (name1 == null) {
          name1 = null;
        }
        if (name2 == null) {
          name2 = null;
        }
        if (!md.Views['search-bar']) {
          return require(['views/search-bar'], (function(_this) {
            return function(SearchbarView) {
              md.Views['search-bar'] = new SearchbarView({
                name1: name1,
                name2: name2
              });
              return $(md.Views['search-bar'].el).addClass('visible');
            };
          })(this));
        } else {
          md.Views['search-bar'].render(name1);
          return $(md.Views['search-bar'].el).addClass('visible');
        }
      };

      Router.prototype.getFilters = function() {
        if (!md.Views['filters']) {
          return require(['views/filters'], (function(_this) {
            return function(FiltersView) {
              return md.Views['filters'] = new FiltersView();
            };
          })(this));
        }
      };

      Router.prototype.getPerson = function(name) {
        if (!md.Views['searchBar']) {
          this.getSearchbar(name);
        }
        return md.Views['person'] = new PersonView({
          name1: name
        });
      };

      Router.prototype.getComparison = function(name1, name2) {
        this.getSearchbar(name1, name2);
        return md.Views['person'] = new ComparisonView({
          name1: name1,
          name2: name2
        });
      };

      Router.prototype.onResize = function() {
        $('#main').width($(window).width() - 80);
        $('#search-bar').width($(window).width() - 80);
        return $('#loader').width($(window).width() - 80);
      };

      return Router;

    })(Backbone.Router);
  });

}).call(this);
