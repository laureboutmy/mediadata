// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'mediadata', '../collections/persons', '../models/person', '../views/home', '../views/person', '../views/comparison', '../views/search', '../views/index', '../views/about', '../views/contact'], function($, _, Backbone, md, PersonsCollection, PersonModel, HomeView, PersonView, ComparisonView, SearchView, IndexView, AboutView, ContactView) {
    'use strict';
    var Router;
    return Router = (function(_super) {
      __extends(Router, _super);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.routes = {
        '': 'home',
        'rechercher': 'getSearch',
        'a-propos': 'getAbout',
        'contact': 'getContact',
        'index': 'getIndex',
        ':person': 'getPerson',
        ':person/:otherPerson': 'getComparison'
      };

      Router.prototype.initialize = function() {
        this.onResize();
        return this.bind();
      };

      Router.prototype.bind = function() {
        $('#main').on('click', '[data-link]', this.go);
        $('#sidebar').on('click', '[data-link]', this.go);
        return $(window).on('resize', this.onResize);
      };

      Router.prototype.home = function() {
        this.showLoader();
        this.hideSearchbar();
        md.Views['home'] = new HomeView();
        return md.Views['home'].render();
      };

      Router.prototype.getSearchbar = function(name1, name2, isSearch) {
        if (name1 == null) {
          name1 = null;
        }
        if (name2 == null) {
          name2 = null;
        }
        if (isSearch == null) {
          isSearch = null;
        }
        if (!md.Views['search-bar']) {
          return require(['views/search-bar'], (function(_this) {
            return function(SearchbarView) {
              if (isSearch) {
                md.Views['search-bar'] = new SearchbarView({
                  isSearch: isSearch
                });
              } else {
                md.Views['search-bar'] = new SearchbarView({
                  name1: name1,
                  name2: name2
                });
              }
              return $(md.Views['search-bar'].el).addClass('visible');
            };
          })(this));
        } else {
          if (isSearch) {
            md.Views['search-bar'].render({
              isSearch: isSearch
            });
          } else {
            md.Views['search-bar'].render({
              name1: name1,
              name2: name2
            });
          }
          return $(md.Views['search-bar'].el).addClass('visible');
        }
      };

      Router.prototype.hideSearchbar = function() {
        if (md.Views['search-bar']) {
          return $(md.Views['search-bar'].el).removeClass('visible');
        }
      };

      Router.prototype.getFilters = function() {
        if (!md.Views['filters']) {
          return require(['views/filters'], (function(_this) {
            return function(FiltersView) {
              return md.Views['filters'] = new FiltersView();
            };
          })(this));
        } else {
          return md.Views['filters'].render();
        }
      };

      Router.prototype.getPerson = function(name) {
        md.Router.showLoader();
        this.getSearchbar(name);
        md.Views['person'] = new PersonView({
          name1: name
        });
        return this.updateSidebar();
      };

      Router.prototype.getSearch = function() {
        md.Status['currentView'] = 'rechercher';
        this.getSearchbar(null, null, true);
        md.Views['rechercher'] = new SearchView();
        return this.updateSidebar();
      };

      Router.prototype.getIndex = function() {
        md.Router.showLoader();
        md.Status['currentView'] = 'index';
        if (md.Views['search-bar']) {
          $(md.Views['search-bar'].el).removeClass('visible');
        }
        md.Views['index'] = new IndexView();
        return this.updateSidebar();
      };

      Router.prototype.getAbout = function() {
        md.Router.showLoader();
        md.Status['currentView'] = 'a-propos';
        if (md.Views['search-bar']) {
          $(md.Views['search-bar'].el).removeClass('visible');
        }
        md.Views['a-propos'] = new AboutView();
        return this.updateSidebar();
      };

      Router.prototype.getContact = function() {
        md.Router.showLoader();
        md.Status['currentView'] = 'contact';
        if (md.Views['search-bar']) {
          $(md.Views['search-bar'].el).removeClass('visible');
        }
        md.Views['contact'] = new ContactView();
        return this.updateSidebar();
      };

      Router.prototype.getComparison = function(name1, name2) {
        md.Router.showLoader();
        this.getSearchbar(name1, name2);
        return md.Views['comparison'] = new ComparisonView({
          name1: name1,
          name2: name2
        });
      };

      Router.prototype.onResize = function() {
        var wWidth;
        wWidth = $(window).width();
        $('#main').width(wWidth - 80);
        $('#search-bar').width(wWidth - 80);
        return $('#loader').width(wWidth - 80);
      };

      Router.prototype.showLoader = function() {
        var loader;
        loader = $('#main-loader');
        if (!loader.hasClass('visible')) {
          return loader.addClass('z-index').addClass('visible');
        }
      };

      Router.prototype.hideLoader = function() {
        var loader;
        loader = $('#main-loader');
        if (loader.hasClass('debut')) {
          loader.removeClass('debut');
        }
        loader.removeClass('visible');
        setTimeout(function() {
          return $("#main-loader").removeClass('z-index');
        }, 300);
      };

      Router.prototype.go = function(evt) {
        var url;
        evt.preventDefault();
        md.Views[md.Status['currentView']].destroy();
        url = $(this).data('link');
        return md.Router.navigate(url, {
          trigger: true
        });
      };

      Router.prototype.updateSidebar = function() {
        $('#sidebar').find('.active').removeClass('active');
        if (md.Status['currentView'] === 'person' || md.Status['currentView'] === 'comparison') {
          return $('#sidebar').find('[data-link=rechercher]').addClass('active');
        } else {
          return $('#sidebar').find('[data-link=' + md.Status['currentView'] + ']').addClass('active');
        }
      };

      return Router;

    })(Backbone.Router);
  });

}).call(this);
