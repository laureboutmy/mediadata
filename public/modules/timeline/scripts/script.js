// Generated by CoffeeScript 1.7.1

/* Var / Functions */

(function() {
  var area, chart, height, margin, maxXValues, maxYValues, minMaxX, minMaxY, minXValues, minYValues, parseDate, person1, person2, svg, valueline, width, x, xAxis, y, yAxis, yGrid;

  person1 = 'anne-hidalgo';

  person2 = 'christiane-taubira';

  minXValues = [];

  minYValues = [];

  maxXValues = [];

  maxYValues = [];

  minMaxX = [];

  minMaxY = [];

  parseDate = d3.time.format('%Y-%m').parse;

  margin = {
    top: 20,
    right: 20,
    bottom: 30,
    left: 50
  };

  width = 960;

  height = 300;

  svg = d3.select('body').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

  x = d3.time.scale().range([0, width]);

  y = d3.scale.linear().range([height, 0]);

  xAxis = d3.svg.axis().scale(x).orient('bottom').ticks(d3.time.year, 2);

  yAxis = d3.svg.axis().scale(y).orient('left').ticks(5);

  area = d3.svg.area().interpolate('cardinal').x(function(d) {
    return x(d.mentionDate);
  }).y0(height).y1(function(d) {
    return y(d.mentionCount);
  });

  valueline = d3.svg.line().interpolate('cardinal').x(function(d) {
    return x(d.mentionDate);
  }).y(function(d) {
    return y(d.mentionCount);
  });

  yGrid = function() {
    return d3.svg.axis().scale(y).orient('left').ticks(5);
  };


  /* Make the chart */

  chart = {
    drawChart: function(person1, person2) {
      return d3.json('person-' + person1 + '.json', function(error, data) {
        var d, i, maxXValue, maxYValue, minXValue, minYValue, _i, _len, _ref;
        _ref = data.timelineMentions;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          d = _ref[i];
          d.index = i;
          d.mentionDate = parseDate(d.mentionDate);
          d.mentionCount = +d.mentionCount;
        }
        console.log(data.timelineMentions);
        minXValues.push(d3.min(data.timelineMentions, function(d) {
          return d.mentionDate;
        }));
        maxXValues.push(d3.max(data.timelineMentions, function(d) {
          return d.mentionDate;
        }));
        minYValues.push(d3.min(data.timelineMentions, function(d) {
          return d.mentionCount;
        }));
        maxYValues.push(d3.max(data.timelineMentions, function(d) {
          return d.mentionCount;
        }));
        console.log(minXValues);
        console.log(maxXValues);
        console.log(minYValues);
        console.log(maxYValues);
        if (person2) {
          return d3.json('person-' + person2 + '.json', function(error, data) {
            var maxXValue, maxYValue, minXValue, minYValue, _j, _len1, _ref1;
            _ref1 = data.timelineMentions;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              d = _ref1[i];
              d.index = i;
              d.mentionDate = parseDate(d.mentionDate);
              d.mentionCount = +d.mentionCount;
            }
            minXValues.push(d3.min(data.timelineMentions, function(d) {
              return d.mentionDate;
            }));
            maxXValues.push(d3.max(data.timelineMentions, function(d) {
              return d.mentionDate;
            }));
            minYValues.push(d3.min(data.timelineMentions, function(d) {
              return d.mentionCount;
            }));
            maxYValues.push(d3.max(data.timelineMentions, function(d) {
              return d.mentionCount;
            }));
            minXValue = d3.min(minXValues);
            maxXValue = d3.max(maxXValues);
            minMaxX.push(minXValue, maxXValue);
            minYValue = d3.max(minYValues);
            maxYValue = d3.max(maxYValues);
            minMaxY.push(minYValue, maxYValue);
            console.log(minMaxX);
            console.log(minMaxY);
            x.domain(minMaxX);
            y.domain(minMaxY);
            chart.appendChart(person1, 1);
            return chart.appendChart(person2, 2);
          });
        } else {
          minXValue = d3.min(minXValues);
          maxXValue = d3.max(maxXValues);
          minMaxX.push(minXValue, maxXValue);
          minYValue = d3.max(minYValues);
          maxYValue = d3.max(maxYValues);
          minMaxY.push(minYValue, maxYValue);
          console.log(minMaxX);
          console.log(minMaxY);
          x.domain(minMaxX);
          y.domain(minMaxY);
          return chart.appendChart(person1, 1);
        }
      });
    },
    appendChart: function(person, datasetnumber) {
      return d3.json('person-' + person + '.json', function(error, data) {
        var d, i, _i, _len, _ref;
        _ref = data.timelineMentions;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          d = _ref[i];
          d.index = i;
          d.mentionDate = parseDate(d.mentionDate);
          d.mentionCount = +d.mentionCount;
        }
        if (datasetnumber === 1) {
          svg.append('g').attr('class', 'grid').call(yGrid().tickSize(-width, 0, 0).tickFormat(''));
        }
        svg.append('path').attr('class', 'line' + datasetnumber).attr('d', valueline(data.timelineMentions));
        svg.append('path').datum(data.timelineMentions).attr('class', 'area' + datasetnumber).attr('d', area);
        svg.selectAll('circle' + datasetnumber).data(data.timelineMentions).enter().append('circle').attr('class', 'circle' + datasetnumber).attr('r', 3.5).attr('cx', function(d) {
          return x(d.mentionDate);
        }).attr('cy', function(d) {
          return y(d.mentionCount);
        });
        if (datasetnumber === 1) {
          svg.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + height + ')').call(xAxis);
          svg.append('g').attr('class', 'y axis').call(yAxis).append('text').attr('transform', 'rotate(-90)').attr('y', 6).attr('dy', '.71em').style('text-anchor', 'end');
        }
        return console.log(person + ' drawn!');
      });
    },
    exec: function() {
      return chart.drawChart(person1, person2);
    }
  };

  chart.exec();

}).call(this);
