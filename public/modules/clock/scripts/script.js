// Generated by CoffeeScript 1.7.1

/* Var / Functions */

(function() {
  var arc, arcOptions, chartData, drawClock, drawClockContent, i, person, radiusScale, svg, unzoom, visWidth, _i;

  person = 'christiane-taubira';

  svg = d3.select('svg').append('g').attr('id', 'clock');

  chartData = [];

  for (i = _i = 1; _i <= 24; i = ++_i) {
    chartData.push({});
  }

  visWidth = 200;

  unzoom = 5;

  radiusScale = d3.scale.linear().domain([0, 20]).range([100, visWidth - 40]).clamp(false);

  arcOptions = {
    width: 7.1,
    from: 50,
    to: function(d) {
      return d.outerRadius;
    }
  };

  arc = function(d, o) {
    return d3.svg.arc().startAngle(function(d) {
      if (d.mentions > 0) {
        return (d.time * 15 - o.width) * Math.PI / 180;
      } else {
        return 0;
      }
    }).endAngle(function(d) {
      if (d.mentions > 0) {
        return (d.time * 15 + o.width) * Math.PI / 180;
      } else {
        return 0;
      }
    }).innerRadius(o.from).outerRadius(function(d) {
      if (d.mentions > 0) {
        return o.to(d);
      } else {
        return 0;
      }
    });
  };


  /* Make the chart */

  drawClockContent = function(parent, newJSON, arcOptions) {
    return d3.json('person-' + person + '.json', function(error, data) {
      var cw, d, maxValue, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2;
      _ref = data.broadcastHoursByDay;
      for (i = _j = 0, _len = _ref.length; _j < _len; i = ++_j) {
        d = _ref[i];
        d.broadcastHour = +d.broadcastHour;
        d.broadcastCount = +d.broadcastCount;
      }
      _ref1 = data.broadcastHoursByDay;
      for (i = _k = 0, _len1 = _ref1.length; _k < _len1; i = ++_k) {
        d = _ref1[i];
        newJSON[d.broadcastHour].mentions = 0;
        newJSON[d.broadcastHour].outerRadius = 0;
        newJSON[d.broadcastHour].time = d.broadcastHour;
      }
      console.log(newJSON);
      for (i = _l = 0, _len2 = newJSON.length; _l < _len2; i = ++_l) {
        d = newJSON[i];
        if (!d.time) {
          d.time = i;
        }
        if (!d.mentions) {
          d.mentions = 0;
        }
        if (!d.outerRadius) {
          d.outerRadius = 0;
        }
      }
      maxValue = [0];
      _ref2 = data.broadcastHoursByDay;
      for (i = _m = 0, _len3 = _ref2.length; _m < _len3; i = ++_m) {
        d = _ref2[i];
        if (d.broadcastWeekday === 'Monday') {
          console.log(d.broadcastCount);
          newJSON[d.broadcastHour].mentions += d.broadcastCount;
          newJSON[d.broadcastHour].outerRadius = radiusScale(newJSON[d.broadcastHour].mentions) / unzoom + 50;
          if (d.broadcastCount > maxValue[0]) {
            maxValue[0] = d.broadcastCount;
            maxValue[1] = d.broadcastHour;
          }
        }
      }
      console.log(maxValue);
      parent.append('svg:g').attr('class', 'arcs').selectAll('path').data(newJSON).enter().append('svg:path').attr('d', arc(newJSON, arcOptions)).attr('transform', 'translate(' + visWidth + ',' + visWidth + ')').on('mouseover', function(d) {
        d3.select('.time').text(d.time + ' heures');
        return d3.select('.value').text(d.mentions);
      });
      cw = parent.append('svg:g').attr('class', 'center');
      cw.append('svg:text').data(newJSON).attr('transform', 'translate(' + visWidth + ',' + visWidth + ')').attr('class', 'time').text(maxValue[1] + ' heures');
      return cw.append('svg:text').data(newJSON).attr('transform', 'translate(' + visWidth + ',' + (visWidth + 20) + ')').attr('class', 'value').text(maxValue[0]);
    });
  };

  drawClock = function(d) {
    var clock, h, labels, p, r, radiusFunction, ticks, w;
    w = 400;
    h = 400;
    r = Math.min(w, h) / 2;
    p = 24;
    labels = ['00:00', '06:00', '12:00', '18:00'];
    clock = d3.select('svg g');
    ticks = d3.range(20, 20.1);
    radiusFunction = radiusScale;
    clock.append('svg:g').attr('class', 'circle').selectAll('circle').data(ticks).enter().append('svg:circle').attr('cx', r).attr('cy', r).attr('r', radiusScale);
    clock.append('svg:g').attr('class', 'labels').selectAll('text').data(d3.range(0, 360, 90)).enter().append('svg:text').attr('transform', function(d) {
      return 'translate(' + r + ',' + p + ') rotate(' + d + ',0,' + (r - p) + ')';
    }).text(function(d) {
      return d / 15 + ':00';
    });
    return drawClockContent(clock, chartData, arcOptions);
  };

  drawClock(chartData);

}).call(this);
